Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.


// Try dynamic programming
// DP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j]
//   DP[i][j] = DP[i - 1][j - 1] + 1            , if text1[i] == text2[j]
//   DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]) , otherwise

public int longestCommonSubsequence(String text1, String text2)
    {
        int n1 = text1.length() + 1, n2 = text2.length() + 1;
        int dp[][] = new int[n1][n2];
        
        for (int i = 0; i < n1; i++) dp[i][0] = 0;
        for (int i = 0; i < n2; i++) dp[0][i] = 0;
        
        for (int i = 1; i < n1; i++)
        {
            for (int j = 1; j < n2; j++)
            {
                if (text1.charAt(i - 1) == text2.charAt(j - 1))
                {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                }
                else
                {
                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
                }
            }
        }
        // System.out.println(Arrays.deepToString(dp));
        return dp[n1 - 1][n2 - 1];
    }
