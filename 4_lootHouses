A thief wants to loot houses. He knows the amount of money in each house. He cannot loot two consecutive houses. Find the maximum amount of money he can loot.

Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.


// Recursive
class Solution
{
    // rob = max( nums[i] + rob[i + 2 : n] , rob[i + 1 : n])
    
    public int rob(int[] nums)
    {
        return rob(nums, 0);
    }
    
    public int rob(int[] nums, int start)
    {
        if (start >= nums.length) return 0;
        if (start == nums.length - 1) return nums[start];
        
        return Math.max(nums[start] + rob(nums, start + 2),
                        rob(nums, start + 1));
    }
}

// Recursive + Memoization
class Solution
{
    // rob = max( nums[i] + rob[i + 2 : n] , rob[i + 1 : n])
    
    public int rob(int[] nums)
    {
        Map<Integer, Integer> loot = new HashMap<>();
        return rob(nums, 0, loot);
    }
    
    public int rob(int[] nums, int start, Map<Integer, Integer> loot)
    {
        if (loot.containsKey(start)) return loot.get(start);
        if (start >= nums.length) return 0;
        if (start == nums.length - 1) return nums[start];
        
        int max = Math.max(nums[start] + rob(nums, start + 2, loot),
                           rob(nums, start + 1, loot));
        loot.put(start, max);
        return max;
    }
}

// Iterative
class Solution
{
    public int rob(int[] nums)
    {
        int n = nums.length;
        
        if (n == 1) return nums[0];
        if (n == 2) return Math.max(nums[0], nums[1]);
        
        int[] loot = new int[n];
        loot[n - 1] = nums[n - 1];
        loot[n - 2] = Math.max(nums[n - 1], nums[n - 2]);
        
        for (int i = n - 3; i >= 0; i--)
        {
            loot[i] = Math.max(nums[i] + loot[i + 2],
                               loot[i + 1]);
        }
        
        return loot[0];
    }
}
