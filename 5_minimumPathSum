Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.



// Recursion

class Solution
{
    public int minPathSum(int[][] grid)
    {
        int[][] sumUntil = new int[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++)
        {
            for (int j = 0; j < grid[0].length; j++)
            {
                sumUntil[i][j] = -1;
            }
        }
        return minPathSum(grid, grid.length - 1, grid[0].length - 1, sumUntil);
    }
    
    private int minPathSum(int[][] grid, int i, int j, int[][] sumUntil)
    {
        if (sumUntil[i][j] > -1) return sumUntil[i][j];
        
        int sum = 0;
        
        if (i > 0 && j > 0)
            sum = grid[i][j] + Math.min(minPathSum(grid, i - 1, j, sumUntil),
                                        minPathSum(grid, i, j - 1, sumUntil));
        else if (i > 0)
            sum = grid[i][j] + minPathSum(grid, i - 1, j, sumUntil);
        else if (j > 0)
            sum = grid[i][j] + minPathSum(grid, i, j - 1, sumUntil);
        else
            sum = grid[i][j];
        
        sumUntil[i][j] = sum;
        return sum;
    }
}


// Dynamic Programming

class Solution
{
    public int minPathSum(int[][] grid)
    {
        int m = grid.length;
        int n = grid[0].length;
        
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        
        for (int i = 1; i < m; i++) dp[i][0] = dp[i - 1][0] + grid[i][0];
        for (int i = 1; i < n; i++) dp[0][i] = dp[0][i - 1] + grid[0][i];
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
            }
        }
        return dp[m - 1][n - 1];
    }
}
