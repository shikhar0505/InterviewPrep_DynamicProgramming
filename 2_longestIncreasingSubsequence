## Given an integer array nums, return the length of the longest strictly increasing subsequence.

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

public int lengthOfLIS(int[] nums)
{
    int[] subLen = new int[nums.length];

    // subsequence starting with the last element
    subLen[nums.length - 1] = 1;

    for (int i = nums.length - 2; i >= 0; i--)
    {
        int max = 0;
        for (int j = i + 1; j < nums.length; j++)
        {
            if (nums[j] > nums[i] && subLen[j] > max)
            {
                max = subLen[j];
            }
        }
        subLen[i] = 1 + max;
    }

    int maxLen = -1;
    for (int len : subLen)
    {
        if (maxLen < len) maxLen = len;
    }
    return maxLen;
}
