A thief is robbing a store and can carry a maximum weight of ‘W’ into his knapsack. There are 'N' items available in the store and the weight and value of each item is known to the thief. Considering the constraints of the maximum weight that a knapsack can carry, you have to find the maximum profit that a thief can generate by stealing items.

Note: The thief is not allowed to break the items.


Recursive with memoization
--------------------------
public static int knapsack_01(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w)
{
    int[][] dp = new int[n][w];
    for (int[] row : dp)
    Arrays.fill(row, -1);
    return _knapsack_01(values, weights, n, w, 0, dp);
}

private static int _knapsack_01(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w, int index, int[][] dp)
{
    if (index >= n || w == 0) return 0;
    if (dp[index][w - 1] != -1) return dp[index][w - 1];
    if (weights.get(index) > w) return maxProfit(values, weights, n, w, index + 1, dp);
    int p = Math.max(values.get(index) + maxProfit(values, weights, n, w - weights.get(index), index + 1, dp),
                     maxProfit(values, weights, n, w, index + 1, dp));
    dp[index][w - 1] = p;
    return p;
}


DP Iterative
------------
public static int knapsack_01(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w)
{
    // 2d array representing no. of items by weight limit or capacity of the sack
    // n=4, w=5 => 2d array [n + 1][w + 1]
    //    [0 0 0 0 0] or row representing no item, if sack capacity was 0, 1, 2 ... w  =>  all 0s ffor this row
    //    [0 0 0 0 0]] or row representing item 1, if sack capacity was 0, 1, 2 ... w
    //    [0 0 0 0 0] or row representing item 1 and 2
    //    [0 0 0 0 0] or row representing item 1, 2 and 3
    //    [0 0 0 0 0] or row representing item 1, 2, 3 and 4
    int dp[][] = new int[n + 1][w + 1];
    for (int i = 0; i <= n; i++) Arrays.fill(dp[i], 0);

    for (int i = 1; i <= n; i++)
    {
        int weight = weights.get(i - 1);
        int value = values.get(i - 1);
        for (int j = 1; j <= w; j++)
        {
            if (j < weight) dp[i][j] = dp[i - 1][j];
            else
            {
                dp[i][j] = Math.max(dp[i - 1][j], // didn't pick this one
                                    value + dp[i - 1][j - weight]); // picked this one
            }
        }
    }
    return dp[n][w];
}
